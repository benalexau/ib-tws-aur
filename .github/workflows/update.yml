name: Maintain AUR Package

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:  # Allow manual triggering

jobs:
  update-aur-package:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest

    steps:
    - name: Install required tools and setup user
      run: |
        pacman -Sy --noconfirm git openssh curl jq base-devel sudo

        # Create a non-root user for makepkg
        useradd -m builder
        echo 'builder ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers

    - name: Setup SSH for AUR
      run: |
        # Setup SSH for the builder user
        SSH_DIR="/home/builder/.ssh"
        mkdir -p "$SSH_DIR"
        echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > "$SSH_DIR/aur"
        chmod 600 "$SSH_DIR/aur"
        chmod 700 "$SSH_DIR"
        chown -R builder:builder "$SSH_DIR"

        # Get AUR host keys
        sudo -u builder ssh-keyscan aur.archlinux.org >> "$SSH_DIR/known_hosts" 2>/dev/null

        # Configure SSH for AUR
        sudo -u builder tee "$SSH_DIR/config" > /dev/null << 'EOF'
        Host aur.archlinux.org
          IdentityFile /home/builder/.ssh/aur
          User aur
        EOF

        chmod 600 "$SSH_DIR/config"
        chmod 644 "$SSH_DIR/known_hosts"
        chown builder:builder "$SSH_DIR/config" "$SSH_DIR/known_hosts"

    - name: Configure Git
      run: |
        sudo -u builder git config --global user.name "${{ vars.AUR_USERNAME }}"
        sudo -u builder git config --global user.email "${{ vars.AUR_EMAIL }}"

    - name: Clone AUR repository
      run: |
        cd /home/builder
        sudo -u builder git clone ssh://aur@aur.archlinux.org/${{ vars.AUR_PACKAGE_NAME }}.git

    - name: Check for updates and modify PKGBUILD
      id: check_update
      run: |
        cd /home/builder/${{ vars.AUR_PACKAGE_NAME }}

        CURRENT_VERSION=$(grep "pkgver=" PKGBUILD | cut -d'=' -f2)

        # Get latest version from upstream
        # Thanks to https://raw.githubusercontent.com/gnzsnz/ib-gateway-docker/
        RES=$(curl -s https://download2.interactivebrokers.com/installers/tws/latest-standalone/version.json | sed 's/twslatest_callback(//g;s/);//g')
        LATEST_VERSION=$(jq -r '.buildVersion' <<< "$RES")

        echo "Current version: $CURRENT_VERSION"
        echo "Latest version: $LATEST_VERSION"

        if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
          echo "Update needed"

          # Update PKGBUILD
          sed -i "s/pkgver=.*/pkgver=$LATEST_VERSION/" PKGBUILD

          # Reset pkgrel to 1 for new version
          sed -i "s/pkgrel=.*/pkgrel=1/" PKGBUILD

          # Download new version to compute sha256sum
          URL='https://download2.interactivebrokers.com/installers/tws/latest-standalone/tws-latest-standalone-linux-x64.sh'
          DEST='tws-latest-standalone-linux-x64.sh'
          curl -sSL "$URL" --output "$DEST"

          # Extract the sha256sum
          NEW_SHA256=$(sha256sum "$DEST" | cut -d' ' -f1)

          # Update the last sha256sum in the PKGBUILD
          tac PKGBUILD | sed "0,/'[a-f0-9]\{64\}'/{s/'[a-f0-9]\{64\}'/'$NEW_SHA256'/}" | tac > PKGBUILD.tmp && mv PKGBUILD.tmp PKGBUILD

          # Clean up downloaded file
          rm "$DEST"

          echo "updated=true" >> $GITHUB_OUTPUT
          echo "new_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
        else
          echo "No update needed"
          echo "updated=false" >> $GITHUB_OUTPUT
        fi

    - name: Generate .SRCINFO
      if: steps.check_update.outputs.updated == 'true'
      run: |
        cd /home/builder/${{ vars.AUR_PACKAGE_NAME }}

        # Generate .SRCINFO using makepkg as non-root user
        sudo -u builder makepkg --printsrcinfo > .SRCINFO

    - name: Commit and push changes
      if: steps.check_update.outputs.updated == 'true'
      run: |
        cd /home/builder/${{ vars.AUR_PACKAGE_NAME }}

        sudo -u builder git add PKGBUILD .SRCINFO
        sudo -u builder git commit -m "Update to ${{ steps.check_update.outputs.new_version }}"
        sudo -u builder git push origin master

    - name: Create GitHub release summary
      if: steps.check_update.outputs.updated == 'true'
      run: |
        echo "## AUR Package Updated" >> $GITHUB_STEP_SUMMARY
        echo "Package: ${{ vars.AUR_PACKAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "New version: ${{ steps.check_update.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
        echo "Updated at: $(date)" >> $GITHUB_STEP_SUMMARY
